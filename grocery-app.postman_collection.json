{
	"info": {
		"_postman_id": "919e1f0e-2d20-44cf-98a4-288adef6e5a5",
		"name": "grocery-app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27785473",
		"_collection_link": "https://fyp-team-0810.postman.co/workspace/FYP-team-Workspace~d815ab25-93f6-421c-898d-3fd81efc1eaf/collection/27785473-919e1f0e-2d20-44cf-98a4-288adef6e5a5?action=share&source=collection_link&creator=27785473"
	},
	"item": [
		{
			"name": "Functional Test Cases",
			"item": [
				{
					"name": "User Authentication",
					"item": [
						{
							"name": "GET user by Token",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/core/get-user/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"get-user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register valid user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"testingforemptylist\",\r\n    \"email\": \"ayesha@gmail.com\",\r\n    \"password\": \"ayeshaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register valid user Copy",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"testingggforemptylist\",\r\n    \"email\": \"ayesha@gmail.com\",\r\n    \"password\": \"ayeshaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with Existing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Duplicate email should fail\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email[1]).to.include(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"username11\",\r\n    \"email\": \"ayesha@gmail.com\",\r\n    \"password\": \"username11\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with Weak Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Weak password should be rejected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.password[1]).to.include(\"too short\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"username123\",\r\n    \"email\": \"ayesha2@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with Special Characters in Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special characters in username should fail\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.username[0]).to.include(\"Enter a valid username\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"username$&$\",\r\n    \"email\": \"ayesha2@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with Special Characters in Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password with special characters should be accepted\", function () {\r",
											"    pm.response.to.have.status(201); \r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"usernanamem\",\r\n    \"email\": \"ayesha2@gmail.com\",\r\n    \"password\": \"123^&*(%$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register to check Case Insensitive Username Handling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Case-insensitive username conflict\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.username[0]).to.include(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"Username123\",\r\n    \"email\": \"ayesha2@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with Space Between Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Username with space should be accepted \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"user name\",\r\n  \"email\": \"spaceduser@email.com\",\r\n  \"password\": \"Password123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with Space Between password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password with space should be accepted\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"useame\",\r\n  \"email\": \"spaceduser@email.com\",\r\n  \"password\": \"Passwordn        123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user  With Leading/Trailing Spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Leading/trailing spaces should be trimmed\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.username).to.eql(\"amna\");\r",
											"    pm.expect(jsonData.email).to.eql(\"amnaa1\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"   amna    \",\r\n    \"email\": \"amnaa2@gmail.com\",\r\n    \"password\": \"amnaa1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection Attempt in Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"SQL injection in username should be rejected\", function () {\r",
											"    pm.expect(pm.response.code).to.not.equal(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"' OR 1=1 --\",\r\n    \"email\": \"ayesha2@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with empty Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing fields should return validation error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with Missing Email Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing email should return error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email[0]).to.include(\"This field is required.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"nouseremail\",\r\n  \"password\": \"Password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with Missing username Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing username should return error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username[0]).to.include(\"This field is required.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"user@email.com\",\r\n  \"password\": \"Password123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with Missing password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing password should return error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"    pm.expect(jsonData.password[0]).to.include(\"This field is required.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"missingpassword\",\r\n  \"email\": \"missing@pass.com\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Using Email Already Registered with Different Casing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Email case-insensitivity should prevent duplicates\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email[0]).to.include(\"already exists\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"alishba\",\r\n    \"email\": \"AYESHA@gmail.com\",\r\n    \"password\": \"0986t\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Using Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should fail with invalid email format\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email[0]).to.include(\"Enter a valid email address\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"alishbaaaaaa\",\r\n    \"email\": \"mairaa789@gmailcom\",\r\n    \"password\": \"0986t\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user Password With All Spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password of all spaces should fail\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"anum\",\r\n    \"email\": \"anum@gmail.com\",\r\n    \"password\": \"      \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register user with Very Large Request Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Extra fields should be ignored or rejected\", function () {\r",
											"    pm.response.to.have.status.within(200, 400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"anum\",\r\n    \"email\": \"anum@gmail.com\",\r\n    \"password\": \"lkdffifij\",\r\n    \"extraField1\": \"I should be ignored\",\r\n  \"extraField2\": \"Or throw a validation error\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With HTML/JS Code in Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"XSS scripts should be sanitized or rejected\", function () {\r",
											"    pm.expect(pm.response.code).to.not.equal(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"<script>alert('hack')</script>\",\r\n    \"email\": \"anum@gmail.com\",\r\n    \"password\": \"hhhtbg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With URL Encoded Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"URL encoded characters should be handled properly\", function () {\r",
											"    pm.expect(pm.response.code).to.be.within(200, 400); // depending on sanitization\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"encoded%20user\",\r\n  \"email\": \"encodedtest@gmail.com\",\r\n  \"password\": \"Encoded123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register as Username Same as Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Username and password being the same should be rejected\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.password[0]).to.include(\"cannot be the same as username\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"hhhtbg\",\r\n    \"email\": \"anum@gmail.com\",\r\n    \"password\": \"hhhtbg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register as Overly Long Username (>150 characters)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Username too long should return error\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.username[0]).to.include(\"Ensure this field has no more than\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"jnjngkgbgjjgkbjngjgbgjngbgbjngjnggjnbgjgjfcdrtedvvyfrgyryfgrrfbcplriurfhfrbrfhrfbrfryrfgrfygrfgyrgyfrfgyrfygfrgyrfgyrfgywsrwdrdcdccedctefvypgkitgutghbtbtvtbvutbutbvubvutbu\",\r\n    \"email\": \"anum@gmail.com\",\r\n    \"password\": \"hhhtbg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register as Overly Long Password (>150 characters)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password too long should return error\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.password[0]).to.include(\"Ensure this field has no more than\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"waniah\",\r\n    \"email\": \"anum@gmail.com\",\r\n    \"password\": \"hhhtbfbhvbhvbvhbhvvhbvhbvrbvrbvygryfgyfgyfgyfrgyrfgyokojwsswuwwshsdygygfgrcvcbvccvvfgrrgrgryrufuhcauhwstferdfeeyyehybfbyfyeyefggyfgyhg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN valid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful login returns a token\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"testingforemptylist\",\r\n    \"password\": \"ayeshaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN valid user Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful login returns a token\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"username123\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN Incorrect Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Incorrect password should return 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid credentials\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"testingforemptylist\",\r\n    \"password\": \"ayesh\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN with Missing Password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing password returns validation error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"testingforemptylist\"\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN with empty Password Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"empty password returns validation error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"testingforemptylist\",\r\n    \"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN Missing Username Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing username returns validation error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"password\": \"ayesh\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN with empty Username Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Empty username returns validation error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"username\":\"\",\r\n    \"password\": \"ayesha\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Register with Space Between password Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password with space should be accepted\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"useame\",\r\n  \"email\": \"spaceduser@email.com\",\r\n  \"password\": \"Passwordn        123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/register/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"register",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN user (second user)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"nashra2\",\r\n    \"password\": \"nashra2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with Special Characters in Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special character password handled properly\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"usernanamem\",\r\n    \"email\": \"ayesha2@gmail.com\",\r\n    \"password\": \"123^&*(%$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Logout message is correct\", function () {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.message).to.eql(\"Successfully logged out.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token c2c4d836491a794240b9f5b7c681f223e4c6c36f",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/logout/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"logout",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT with same token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message for invalid token\", function () {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.detail).to.eql(\"Invalid token.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token c2c4d836491a794240b9f5b7c681f223e4c6c36f",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/logout/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"logout",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGOUT Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 or 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
											"});\r",
											"\r",
											"pm.test(\"Proper error message for missing token\", function () {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.detail).to.include(\"Authentication credentials were not provided.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token c2c4d836491a794240b9f5b7c681f223e4c6c36f",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/logout/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"logout",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN Admin",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"ghjkl123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/core/login/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"core",
										"login",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Grocery list Management",
					"item": [
						{
							"name": "GET all grocery-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a list of items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all grocery-items (second User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a list of items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Duplicate Ingredients in Grocery List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure no duplicate items in the list\", function () {\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"\r",
											"    var IngredientNames= new Set();\r",
											"    var hasDuplicate=false;\r",
											"\r",
											"    jsonData.forEach(item =>{\r",
											"        if(IngredientNames.has(item.ingredient_name)){\r",
											"            hasDuplicate=true;\r",
											"        }\r",
											"        else{\r",
											"            IngredientNames.add(item.ingredient_name);\r",
											"        }\r",
											"        });\r",
											"        pm.expect(hasDuplicate,\"Duplicate items found in the list\").to.be.false;\r",
											"    });\r",
											"\r",
											"\r",
											"   \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET grocery-item by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"pm.test(\"Response Should Contain Valid Items by ID\"),function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('ingredient');\r",
											"    pm.expect(jsonData).to.have.property('ingredient_name');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/62/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"62",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET grocery-item by Invalid-ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.equal('No GroceryItem matches the given query.');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/73/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"73",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Grocery Items by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search grocery items by name\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array', \"Response is not an array\");\r",
											"\r",
											"    if (jsonData.length > 0) {\r",
											"        jsonData.forEach(item => {\r",
											"            pm.expect(item.ingredient_name.toLowerCase()).to.include(\"milk\");\r",
											"        });\r",
											"    } else {\r",
											"        console.warn(\"No matching grocery items found.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/?serach=cooking oil",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									],
									"query": [
										{
											"key": "serach",
											"value": "cooking oil"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Get Grocery Items When List is Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get grocery items when list is empty\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array', \"Response is not an array\");\r",
											"    pm.expect(jsonData.length).to.equal(0, \"Grocery list is not empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Ensure grocery_items supports pagination correctly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure API supports pagination\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"current_page\");\r",
											"    pm.expect(jsonData).to.have.property(\"total_pages\");\r",
											"    pm.expect(jsonData).to.have.property(\"items_per_page\");\r",
											"   \r",
											"    pm.expect(jsonData.current_page).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.total_pages).to.be.a(\"number\").and.to.be.above(0);\r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
											"    var limit = 5;  \r",
											"    pm.expect(jsonData.data.length).to.be.at.most(limit);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/?page=1&limit=5",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Grocery Items Using Invalid Query Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure API returns 400 for invalid query parameter\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Ensure response contains correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Invalid query parameter\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/?invalid_param=test",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									],
									"query": [
										{
											"key": "invalid_param",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Grocery Items with Special Characters in Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure API returns 200 OK for special characters in search\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ensure response is an array or empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    \r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    if (jsonData.length > 0) {\r",
											"        jsonData.forEach(item => {\r",
											"            pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
											"            pm.expect(item).to.have.property(\"ingredient_name\").that.is.a(\"string\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/?search=%^^&&**#@#",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "%^^"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "**",
											"value": null
										}
									],
									"hash": "@#"
								}
							},
							"response": []
						},
						{
							"name": "Get the igredient from the list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient search results should match query\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/?query=Tomato",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									],
									"query": [
										{
											"key": "query",
											"value": "Tomato"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add searched ingredient in the list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Selected ingredient should be present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.selected_ingredient).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Tomato\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add searched ingredient in the list Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Selected ingredient should be present in response\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.selected_ingredient).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": \"5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/select/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"select",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE grocery-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Grocery list should be created successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient_name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.ingredient_name).to.eql(\"Tomato\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"ingredient\": 15,\r\n    \"ingredient_name\": \"lemon\"\r\n   \r\n    \r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE empty grocery list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient must be provided\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\"); \r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\"); \r",
											"    pm.expect(jsonData.ingredient[0]).to.equal(\"This field is required.\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Grocery List with Missing Ingredient Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient name must be provided\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient[0]).to.equal(\"This field may not be null.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \r\n    \"ingredient\": \"\",\r\n    \"ingredient_name\": \"\"\r\n   \r\n    \r\n    \r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Grocery List with a Non-Existent Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid ingredients should not be allowed\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \r\n    \"ingredient\": \"2234\",\r\n    \"ingredient_name\": \"banana\"\r\n   \r\n    \r\n    \r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Grocery List with Special Characters in Ingredient Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special characters should not be allowed in ingredient name\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient[0]).to.equal(\"Incorrect type. Expected pk value, received str.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \r\n    \"ingredient\": \"*((&&^\",\r\n    \"ingredient_name\": \"%^&(*@#\"\r\n   \r\n    \r\n    \r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Grocery List with Extra Unknown Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should ignore or reject unknown fields\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ingredient\": 11,\r\n  \"ingredient_name\": \"Tomato\",\r\n  \"device_info\": \"iPhone 14, iOS 17\" //  Irrelevant to grocery list\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE grocery-item by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Ingredient updated\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient_name\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/80/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"80",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  Non-existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for non-existent item\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.include(\"No GroceryItem matches the given query.\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 11\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/9999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"9999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Ingredient ID of Another User's Grocery Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cannot update another user's grocery item\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  Non-existent ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non existent ingredient should show validation errors\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient).to.include(\"Invalid pk \\\"55\\\" - object does not exist.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 55\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Grocery Item with Decimal Quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Decimal quantity should be accepted OR ignored\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 5.5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  Without Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing fields should show validation errors\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient).to.include(\"This field is required.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Grocery Item with String Quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"String quantity should be rejected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": five\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE item While Logged Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 401 if not authenticated\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE With Extra Unknown Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Extra fields should trigger error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(JSON.stringify(jsonData)).to.include(\"Extra fields\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":5,\r\n\"ingredient_name\":\"Tomato\",\r\n\"quantity\": 4,\r\n\"extra_field\": \"not_needed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Without Ingredient ID in URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing ID in URL should return method error\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404, 405]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":5\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Grocery Item with Same ITEM (No Actual Change)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Updating with same quantity returns success\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":5\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Item with Trailing/Leading Whitespace in Ingredient Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Whitespace in ingredient should be handled\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":    5\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Grocery Item Immediately After Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Immediate update after creation works\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":6\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/82/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"82",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Existing Grocery Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should successfully delete grocery item\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/78/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"78",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Non-Existing Grocery Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for non-existing grocery item\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE with Extra Payload in Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Extra request body should be ignored in DELETE\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": \"11\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/85/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"85",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Without Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not allow deletion without authentication\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE grocery Item of Another User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not allow deletion of another user's item\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Using POST Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not allow wrong HTTP method for delete\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/84/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"84",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Without Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not allow deletion without authentication\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE the Last Remaining Item in Grocery List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should delete last item without errors\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/84/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"84",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Shopping list Management",
					"item": [
						{
							"name": "GET all shopping-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a list of items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all shopping-items (second User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a list of items\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Duplicate Ingredients in Shopping List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure no duplicate items in the list\", function () {\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"\r",
											"    var IngredientNames= new Set();\r",
											"    var hasDuplicate=false;\r",
											"\r",
											"    jsonData.forEach(item =>{\r",
											"        if(IngredientNames.has(item.ingredient_name)){\r",
											"            hasDuplicate=true;\r",
											"        }\r",
											"        else{\r",
											"            IngredientNames.add(item.ingredient_name);\r",
											"        }\r",
											"        });\r",
											"        pm.expect(hasDuplicate,\"Duplicate items found in the list\").to.be.false;\r",
											"    });\r",
											"\r",
											"\r",
											"   \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET shopping-item by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 200\",function(){\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"pm.test(\"Response Should Contain Valid Items by ID\"),function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('ingredient');\r",
											"    pm.expect(jsonData).to.have.property('ingredient_name');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/57/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"57",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET shopping-item by Invalid-ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.equal('No ShoppingItem matches the given query.');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/703/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"703",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get shopping Items by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search shopping items by name\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array', \"Response is not an array\");\r",
											"\r",
											"    if (jsonData.length > 0) {\r",
											"        jsonData.forEach(item => {\r",
											"            pm.expect(item.ingredient_name.toLowerCase()).to.include(\"lemon\");\r",
											"        });\r",
											"    } else {\r",
											"        console.warn(\"No matching grocery items found.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/?serach=lemon",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									],
									"query": [
										{
											"key": "serach",
											"value": "lemon"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  Shopping Items When List is Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get shopping items when list is empty\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array', \"Response is not an array\");\r",
											"    pm.expect(jsonData.length).to.equal(0, \"Shopping list is not empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Ensure shopping_items supports pagination correctly.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure API supports pagination\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"current_page\");\r",
											"    pm.expect(jsonData).to.have.property(\"total_pages\");\r",
											"    pm.expect(jsonData).to.have.property(\"items_per_page\");\r",
											"   \r",
											"    pm.expect(jsonData.current_page).to.be.a(\"number\");\r",
											"\r",
											"    pm.expect(jsonData.total_pages).to.be.a(\"number\").and.to.be.above(0);\r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");\r",
											"    var limit = 5;  \r",
											"    pm.expect(jsonData.data.length).to.be.at.most(limit);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/?page=1&limit=5",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get shopping Items Using Invalid Query Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure API returns 400 for invalid query parameter\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Ensure response contains correct error message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.error).to.equal(\"Invalid query parameter\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/?invalid_param=test",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									],
									"query": [
										{
											"key": "invalid_param",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get shopping Items with Special Characters in Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ensure API returns 200 OK for special characters in search\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ensure response is an array or empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    \r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    if (jsonData.length > 0) {\r",
											"        jsonData.forEach(item => {\r",
											"            pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
											"            pm.expect(item).to.have.property(\"ingredient_name\").that.is.a(\"string\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/?search=%^^&&**#@#",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "%^^"
										},
										{
											"key": null,
											"value": null
										},
										{
											"key": "**",
											"value": null
										}
									],
									"hash": "@#"
								}
							},
							"response": []
						},
						{
							"name": "Get the igredient from the list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient search results should match query\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/?query=Tomato",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									],
									"query": [
										{
											"key": "query",
											"value": "Tomato"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE shopping-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Shopping list should be created successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient_name\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.ingredient_name).to.eql(\"lemon\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"ingredient\": 15,\r\n    \"ingredient_name\": \"lemon\"\r\n   \r\n    \r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE empty shopping list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient must be provided\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\"); \r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\"); \r",
											"    pm.expect(jsonData.ingredient[0]).to.equal(\"This field is required.\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create shopping List with Missing Ingredient Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient name must be provided\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient[0]).to.equal(\"This field may not be null.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \r\n    \"ingredient\": \"\",\r\n    \"ingredient_name\": \"\"\r\n   \r\n    \r\n    \r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create shopping List with a Non-Existent Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid ingredients should not be allowed\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \r\n    \"ingredient\": \"2222\",\r\n    \"ingredient_name\": \"banana\"\r\n   \r\n    \r\n    \r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Shopping List with Special Characters in Ingredient Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special characters should not be allowed in ingredient name\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient[0]).to.equal(\"Incorrect type. Expected pk value, received str.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \r\n    \"ingredient\": \"*((&&^\",\r\n    \"ingredient_name\": \"%^&(*@#\"\r\n   \r\n    \r\n    \r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Shopping List with Extra Unknown Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should ignore or reject unknown fields\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ingredient\": 5,\r\n  \r\n  \"device_info\": \"iPhone 14, iOS 17\" //  Irrelevant to grocery list\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-items/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-items",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE shopping-item by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Ingredient updated\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient_name\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/59/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"59",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  Non-existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for non-existent item\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    var jsonData=pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"detail\");\r",
											"    pm.expect(jsonData.detail).to.include(\"No GroceryItem matches the given query.\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 11\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/9999/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"9999",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Ingredient ID of Another User's shopping Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cannot update another user's shopping item\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/52/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"52",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  Non-existent ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non existent ingredient should show validation errors\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 55\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/52/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"52",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE shopping Item with Decimal Quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Decimal quantity should be accepted OR ignored\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ingredient\": 5.5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/52/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"52",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  Without Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing fields should show validation errors\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"ingredient\");\r",
											"    pm.expect(jsonData.ingredient).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.ingredient).to.include(\"This field is required.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/grocery-items/77/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"grocery-items",
										"77",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Item with Trailing/Leading Whitespace in Ingredient Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Whitespace in ingredient should be handled\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ingredient\":    5\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/52/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"52",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE shopping Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should successfully delete grocery item\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/62/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"62",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE existing shopping-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No ShoppingItem matches the given query.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/62/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"62",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Non-Existing shopping Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for non-existing shopping item\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE shopping Item of Another User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not allow deletion of another user's item\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "move-to-grocery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has success message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(\"Item moved to grocery list.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/76/move-to-grocery/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"76",
										"move-to-grocery",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "move-to-grocery invalid item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 for invalid item\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message exists\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error || jsonData.detail).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/7600/move-to-grocery/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"7600",
										"move-to-grocery",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "move-to-grocery already Moved Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 or appropriate\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
											"});\r",
											"\r",
											"pm.test(\"Should show item already moved message\", function () {\r",
											"    let res = pm.response.json();\r",
											"    pm.expect(res.error).to.eql(\"Shopping item not found.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/76/move-to-grocery/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"76",
										"move-to-grocery",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "move-to-grocery negative Item ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid ID returns 400 or 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/shopping-item/-76/move-to-grocery/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"shopping-item",
										"-76",
										"move-to-grocery",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ingredients Management",
					"item": [
						{
							"name": "GET all ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredients list fetched successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.length).to.be.above(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Ingredient Object Structure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Each ingredient has id and name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"id\");\r",
											"        pm.expect(item).to.have.property(\"name\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ingredient using Search-like Filter Simulation (query param)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search returns matching results\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach(item => {\r",
											"        pm.expect(item.name.toLowerCase()).to.include(\"tomato\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/?query=tomato",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									],
									"query": [
										{
											"key": "query",
											"value": "tomato"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ingredientt by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search grocery items by name\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('array', \"Response is not an array\");\r",
											"\r",
											"    if (jsonData.length > 0) {\r",
											"        jsonData.forEach(item => {\r",
											"            pm.expect(item.name.toLowerCase()).to.include(\"meat\");\r",
											"        });\r",
											"    } else {\r",
											"        console.warn(\"No matching ingredient found.\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token ed048b17772d4034aa293ce73db4292182b4dd89",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/?query=meat",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									],
									"query": [
										{
											"key": "query",
											"value": "meat"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ingredient using Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid method not allowed\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403,405]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ingredient Unauthorized Access (No Token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should reject unauthorized access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Check for Alphabetical Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredients should be alphabetically sorted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    const names = jsonData.map(i => i.name.toLowerCase());\r",
											"    const sorted = [...names].sort();\r",
											"    pm.expect(names).to.eql(sorted);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Can Access Ingredient List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin can access ingredient list\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET non_existing ingredient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-existing ingredient should return 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/9/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"9",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET existing ingredient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Existing ingredient should return 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/10/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"10",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET existing ingredient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Existing ingredient should return 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/18/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"18",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient created successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data).to.have.property(\"name\", \"pasta sauce\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"pasta sauce\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Duplicate Ingredient Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Duplicate ingredient not allowed\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.name).to.be.an(\"array\");\r",
											"\r",
											"    pm.expect(data.name).to.include(\"ingredient with this name already exists.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Chicken\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Ingredient Name with Extra Whitespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Whitespace in ingredient name is handled\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.name).to.eql(\"Meat\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"     Meat     \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Numeric Ingredient Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Reject numeric-only ingredient names\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.name).to.include(\"Invalid name format\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"73830\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Ingredient with Special Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special characters should be rejected or sanitized\", function () {\r",
											"    pm.response.to.have.status(201); // Check if status is 201\r",
											"\r",
											"    // Parse response body\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Check if any special characters are present (example with a regex pattern)\r",
											"    // Define a regex to detect special characters (adjust this to your needs)\r",
											"    var specialCharsPattern = /[!@#$%^&*(),.?:{Muttonn}|<>]/;\r",
											"\r",
											"    // Loop through the response to check if any field contains special characters\r",
											"    for (var key in jsonData) {\r",
											"        if (jsonData.hasOwnProperty(key)) {\r",
											"            pm.expect(jsonData[key]).to.not.match(specialCharsPattern, `Special character detected in ${key}`);\r",
											"        }\r",
											"    }\r",
											"\r",
											"    \r",
											"    if (jsonData.hasOwnProperty(\"name\")) {\r",
											"        pm.expect(jsonData.name).to.not.match(specialCharsPattern, \"Ingredient name contains special characters\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"[!@#$%^&*(),.?:{Muttonn}|<>]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Unauthorized Ingredient Creation(without token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Without authnetication credentials ingredients cannot create\", function () {\r",
											"\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"[!@#$%^&*(),.?:{fish}|<>]\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Uppercase vs Lowercase Duplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Case-insensitive duplicate check\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Onion\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Ingredient With empty Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient name should be required\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.include(\"This field may not be blank.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Ingredient by admin only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-admin users should not be able to create ingredients\", function () {\r",
											"    pm.response.to.have.status(403); // Forbidden\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.include(\"You do not have permission to perform this action.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"coco powder\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Ingredient with Non-ASCII Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient name with non-ASCII characters should be allowed\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Jalapeño\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Jalapeño\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient should update successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\");\r",
											"    pm.expect(jsonData.name).to.eql(\"Tomato paste\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Tomato paste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Ingredient to Existing Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not allow duplicate ingredient names\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.include(\"ingredient with this name already exists.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"milk\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Ingredient with Special Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special characters should be rejected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"Invalid characters in name\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"<script>alert('XSS')</script>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE Non-existing Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Updating non-existing ingredient should return 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Turmeric Powder\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/90/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"90",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE with Leading/Trailing Whitespaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient name should be trimmed\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Turmeric Powder\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"       Turmeric Powder     \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with Too Short Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Too short name should be rejected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.include(\"too short\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"a\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE with Empty Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Empty name should not be allowed\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.include(\"This field may not be blank.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Only Admin Can Update Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-admin should not update ingredients\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.include(\"You do not have permission to perform this action.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Fresh Ginger\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin can delete ingredient\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Same Ingredient Twice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Second delete attempt should fail\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.include(\"No Ingredient matches the given query.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE non existing ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deleting non-existent ingredient returns 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/1100/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"1100",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE ingredient with Invalid ID Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid ID should return 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/abc/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"abc",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL Injection Attempt via ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"SQL injection attempt should fail\", function () {\r",
											"    pm.expect(pm.response.code).to.not.equal(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/1 OR 1=1/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"1 OR 1=1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Without Authorization Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized users cannot delete ingredient\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/11/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"11",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Non-Admin Trying to Delete Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-admin should not be allowed to delete\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.include(\"You do not have permission to perform this action.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/ingredients/6/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"ingredients",
										"6",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Recipe List Management",
					"item": [
						{
							"name": "GET all recipes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Each recipe contains required fields\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    jsonData.forEach(recipe => {\r",
											"        pm.expect(recipe).to.have.property(\"id\");\r",
											"        pm.expect(recipe).to.have.property(\"name\").that.is.a(\"string\");\r",
											"        pm.expect(recipe).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(recipe).to.have.property(\"category\").that.is.a(\"number\");\r",
											"        pm.expect(recipe).to.have.property(\"steps\").that.is.a(\"string\");\r",
											"        pm.expect(recipe).to.have.property(\"recipe_ingredients\").that.is.an(\"array\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET admin recipes",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "recipes must not be empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Each recipe must have at least one ingredient\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.forEach(recipe => {\r",
											"        pm.expect(recipe.recipe_ingredients.length).to.be.above(0);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Data Types of Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate types of recipe fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.forEach(recipe => {\r",
											"        pm.expect(recipe.id).to.be.a(\"number\");\r",
											"        pm.expect(recipe.category).to.be.a(\"number\");\r",
											"        pm.expect(recipe.name).to.be.a(\"string\");\r",
											"        pm.expect(recipe.recipe_ingredients).to.be.an(\"array\");\r",
											"        recipe.recipe_ingredients.forEach(ing => {\r",
											"            pm.expect(ing.ingredient).to.be.a(\"number\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Recipes Should Not Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Duplicate recipe names are not allowed\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    let names = jsonData.map(r => r.name.toLowerCase());\r",
											"    let uniqueNames = [...new Set(names)];\r",
											"    pm.expect(names.length).to.eql(uniqueNames.length);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "No Recipe Should Have Null Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No null fields allowed\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.forEach(recipe => {\r",
											"        pm.expect(recipe.name).to.not.be.null;\r",
											"        pm.expect(recipe.description).to.not.be.null;\r",
											"        pm.expect(recipe.steps).to.not.be.null;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Recipes Should Have Meaningful Descriptions and Steps",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe descriptions and steps should be meaningful\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.forEach(recipe => {\r",
											"        pm.expect(recipe.description.length).to.be.above(3);\r",
											"        pm.expect(recipe.steps.length).to.be.above(3);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticated User Fetches Own Recipes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Authenticated user gets own recipes\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var recipes = pm.response.json();\r",
											"    recipes.forEach(recipe => {\r",
											"        pm.expect(recipe).to.have.property(\"name\");\r",
											"        pm.expect(recipe).to.have.property(\"steps\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"coffee\",\r\n    \"description\": \"coffee\",\r\n    \"category\": 1,\r\n    \"steps\": \"Step by step instructions\",\r\n    \"recipe_ingredients\": [\r\n        {\r\n            \"ingredient\": 2\r\n        },\r\n        {\r\n            \"ingredient\": 4\r\n        },\r\n        {\r\n            \"ingredient\": 7\r\n        },\r\n        {\r\n            \"ingredient\": 8\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/my-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"my-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "No Recipes by User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Empty list returned if no recipes by user\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.length).to.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/my-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"my-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthenticated Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized access is blocked\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"coffee\",\r\n    \"description\": \"coffee\",\r\n    \"category\": 1,\r\n    \"steps\": \"Step by step instructions\",\r\n    \"recipe_ingredients\": [\r\n        {\r\n            \"ingredient\": 2\r\n        },\r\n        {\r\n            \"ingredient\": 4\r\n        },\r\n        {\r\n            \"ingredient\": 7\r\n        },\r\n        {\r\n            \"ingredient\": 8\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/my-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"my-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Recipe by Valid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe details fetched by valid ID\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data).to.have.property(\"name\");\r",
											"    pm.expect(data).to.have.property(\"description\");\r",
											"    pm.expect(data).to.have.property(\"recipe_ingredients\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get recipe with Invalid Recipe ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid recipe ID returns 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/33/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"33",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE recipe by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe created successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"name\", \"Pasta\");\r",
											"    pm.expect(res.recipe_ingredients.length).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 8,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE recipe by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin can create recipe\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"name\", \"Chicken Curry\");\r",
											"    pm.expect(jsonData.recipe_ingredients.length).to.eql(4);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Chicken Curry\",\r\n  \"description\": \"Delicious spicy chicken curry\",\r\n  \"category\": 8,\r\n  \"steps\": \"1. Prep\\n2. Cook\\n3. Serve\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 4 },\r\n    { \"ingredient\": 5 },\r\n     { \"ingredient\": 8 },\r\n    { \"ingredient\": 17 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Creates Recipe with No Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ingredient list cannot be empty\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.recipe_ingredients[0]).to.include(\"This field may not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Chicken Curry\",\r\n  \"description\": \"Delicious spicy chicken curry\",\r\n  \"category\": 8,\r\n  \"steps\": \"1. Prep\\n2. Cook\\n3. Serve\",\r\n  \"recipe_ingredients\": [\r\n    \r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recipe with Invalid Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid category should return error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1000,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recipe with Duplicate Ingredient IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Recipe creation handles duplicates correctly\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 26 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recipe Without Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe with no ingredients should fail\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    \r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Recipe Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing name field should return error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"name\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized Access (No Token)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized access should be blocked\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Script Tags in Recipe Name (Sanitization)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should reject or sanitize scripts in input\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var res = pm.response.json();\r",
											"    pm.expect(res.name).to.not.include(\"<script>\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"<script>alert('xss')</script>\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recipe with Special Characters in Name and Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Special characters should be sanitized or allowed\", function () {\r",
											"    pm.response.to.have.status( 400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"<Recipe>@#*&!%\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Ingredient IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid ingredient should return error\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"recipe_ingredients\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 2600 },\r\n    { \"ingredient\": 2700 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Recipe Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Duplicate recipe name should not be allowed\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    var res = pm.response.json();\r",
											"    pm.expect(res.name[0]).to.include(\"already exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"pasta\",\r\n  \"description\": \"Delicious pasta recipe\",\r\n  \"category\": 1,\r\n  \"steps\": \"Boil pasta, add sauce\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 26 },\r\n    { \"ingredient\": 27 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recipe with Maximum Allowed Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe with max ingredients is created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.recipe_ingredients.length).to.be.above(15);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Mega Feast\",\r\n  \"description\": \"Includes everything.\",\r\n  \"category\": 1,\r\n  \"steps\": \"Follow carefully.\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 2 }, { \"ingredient\": 3 }, { \"ingredient\": 4 },\r\n    { \"ingredient\": 5 }, { \"ingredient\": 6 }, { \"ingredient\": 7 },\r\n    { \"ingredient\": 8 }, { \"ingredient\": 19 }, { \"ingredient\": 4 },\r\n    { \"ingredient\": 3 }, { \"ingredient\": 12 }, { \"ingredient\": 13 },\r\n    { \"ingredient\": 14 }, { \"ingredient\": 15 },\r\n    { \"ingredient\": 16 }, { \"ingredient\": 17 }, { \"ingredient\": 13 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE user recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe updated successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"pasta\");\r",
											"    pm.expect(jsonData.steps).to.include(\"Boil pasta\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 12,\r\n    \"name\": \"pasta\",\r\n    \"description\": \"Delicious pasta recipe\",\r\n    \"category\": 1,\r\n    \"steps\": \"Boil pasta, add sauce\",\r\n    \"recipe_ingredients\": [\r\n        {\r\n            \"ingredient\": 26\r\n        },\r\n        {\r\n            \"ingredient\": 27\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/12/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"12",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE admin recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe updated successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Chicken Curry\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"chai\",\r\n  \"description\": \"chai\",\r\n  \"category\": 1,\r\n  \"steps\": \"khud hi banao\",\r\n  \"recipe_ingredients\": [\r\n    { \"ingredient\": 2 },\r\n    { \"ingredient\": 7 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/1/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin update user recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin cannot update another user's recipe\", function () {\r",
											"    pm.response.to.have.status(403); // Forbidden error for unauthorized access\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.eql(\"You do not have permission to perform this action.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 21,\r\n    \"name\": \"Chicken Curry\",\r\n    \"description\": \"Delicious spicy curry\",\r\n    \"category\": 8,\r\n    \"steps\": \"1. Prep\\n2. Cook\\n3. Serve\",\r\n    \"recipe_ingredients\": [\r\n        {\r\n            \"ingredient\": 4\r\n        },\r\n        {\r\n            \"ingredient\": 5\r\n        },\r\n        {\r\n            \"ingredient\": 8\r\n        },\r\n        {\r\n            \"ingredient\": 17\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/15/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"15",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Another user update user recipe Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User cannot update another user's recipe\", function () {\r",
											"    pm.response.to.have.status(403); // Forbidden error for unauthorized access\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.detail).to.eql(\"You do not have permission to perform this action.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 79b2688b7bac9893ebd95a2c3ca4b6c091c3cbfd",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 21,\r\n    \"name\": \"Chicken Curry\",\r\n    \"description\": \"Delicious spicy curry\",\r\n    \"category\": 8,\r\n    \"steps\": \"1. Prep\\n2. Cook\\n3. Serve\",\r\n    \"recipe_ingredients\": [\r\n        {\r\n            \"ingredient\": 4\r\n        },\r\n        {\r\n            \"ingredient\": 5\r\n        },\r\n        {\r\n            \"ingredient\": 8\r\n        },\r\n        {\r\n            \"ingredient\": 17\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/15/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"15",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE recipe without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized user cannot update recipe\", function () {\r",
											"    pm.response.to.have.status(401); // or 403 depending on backend\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 21,\r\n    \"name\": \"Chicken Curry\",\r\n    \"description\": \"Delicious spicy curry\",\r\n    \"category\": 8,\r\n    \"steps\": \"1. Prep\\n2. Cook\\n3. Serve\",\r\n    \"recipe_ingredients\": [\r\n        {\r\n            \"ingredient\": 4\r\n        },\r\n        {\r\n            \"ingredient\": 5\r\n        },\r\n        {\r\n            \"ingredient\": 8\r\n        },\r\n        {\r\n            \"ingredient\": 17\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/1/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Only One Field (PATCH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Partial update with PATCH\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.steps).to.eql(\"1. Prep\\n2. Cook Well\\n3. Serve\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \r\n    \"steps\": \"1. Prep\\n2. Cook Well\\n3. Serve\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/21/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"21",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE  user recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"user successfully deletes recipe\", function () {\r",
											"    pm.response.to.have.status(204); // No Content status for successful deletion\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/15/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"15",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE  admin recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin successfully deletes recipe\", function () {\r",
											"    pm.response.to.have.status(204); // No Content status for successful deletion\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/24/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"24",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin cannot delete user recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin cannot deletes user recipe\", function () {\r",
											"    pm.response.to.have.status(403); // No Content status for successful deletion\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token afa40ab72ed53e605206786d545e979c21eb12b6",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/18/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"18",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Regular User Cannot Delete Admin's Recipe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"user cannot delete admin recipe\", function () {\r",
											"    pm.response.to.have.status(403); // No Content status for successful deletion\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/recipes/25/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipes",
										"25",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET suggested-recipes based on grocery-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"All recipes have required fields\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    recipes.forEach(recipe => {\r",
											"        pm.expect(recipe).to.have.property(\"id\");\r",
											"        pm.expect(recipe).to.have.property(\"name\");\r",
											"        pm.expect(recipe).to.have.property(\"description\");\r",
											"        pm.expect(recipe).to.have.property(\"category\");\r",
											"        pm.expect(recipe).to.have.property(\"steps\");\r",
											"        pm.expect(recipe).to.have.property(\"recipe_ingredients\");\r",
											"        pm.expect(recipe).to.have.property(\"matched_ingredients\");\r",
											"        pm.expect(recipe).to.have.property(\"unmatched_ingredients\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET suggested recipes with Unique Recipe IDs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe IDs are unique\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    const ids = recipes.map(r => r.id);\r",
											"    const uniqueIds = new Set(ids);\r",
											"    pm.expect(uniqueIds.size).to.eql(ids.length);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Matched Ingredients Are Strings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Matched ingredients are strings\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    recipes.forEach(recipe => {\r",
											"        recipe.matched_ingredients.forEach(ingredient => {\r",
											"            pm.expect(ingredient).to.be.a(\"string\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Unmatched Ingredients Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unmatched ingredients have correct structure\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    recipes.forEach(recipe => {\r",
											"        recipe.unmatched_ingredients.forEach(ing => {\r",
											"            pm.expect(ing).to.have.property(\"name\");\r",
											"            pm.expect(ing).to.have.property(\"highlight\", \"red\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Suggested recipes Ingredients Should Not Be Duplicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No duplicate ingredients in each recipe\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    recipes.forEach(recipe => {\r",
											"        const ids = recipe.recipe_ingredients.map(i => i.ingredient);\r",
											"        const uniqueIds = new Set(ids);\r",
											"        pm.expect(uniqueIds.size).to.eql(ids.length);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Suggested recipes Empty  Ingredient Lists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Empty recipe_ingredients have no matches\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    recipes.forEach(recipe => {\r",
											"        if (recipe.recipe_ingredients.length === 0) {\r",
											"            pm.expect(recipe.matched_ingredients.length).to.eql(0);\r",
											"            pm.expect(recipe.unmatched_ingredients.length).to.eql(0);\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Suggested recipes Name Contains Only Valid Characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Recipe names contain only allowed characters\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    const regex = /^[a-zA-Z0-9\\s.,!@#&*'()%-]+$/;\r",
											"    recipes.forEach(recipe => {\r",
											"        pm.expect(regex.test(recipe.name)).to.be.true;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Suggested recipes Response Should Not Be Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"At least one recipe suggestion is returned\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    pm.expect(recipes.length).to.be.above(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Suggested recipes No Duplicate Recipe Names",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No duplicate recipe names (case-insensitive)\", () => {\r",
											"    const recipes = pm.response.json();\r",
											"    const names = recipes.map(r => r.name.toLowerCase().trim());\r",
											"    const duplicates = names.filter((name, index) => names.indexOf(name) !== index);\r",
											"    pm.expect(duplicates.length).to.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Token 16626d25739398a15cfe7d1ddb84bfb96e83ca18",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/suggest-recipes/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"suggest-recipes",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all recipe-ingredients",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/recipe-ingredients/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"recipe-ingredients",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET all categories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/categories/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET category by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/categories/2/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"categories",
										"2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE category",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"spicy\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE category",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"dairy1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/categories/1/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"categories",
										"1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE category",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/categories/3/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"categories",
										"3",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}